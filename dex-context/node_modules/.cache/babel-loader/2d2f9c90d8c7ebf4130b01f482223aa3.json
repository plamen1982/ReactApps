{"ast":null,"code":"var _jsxFileName = \"/home/plamen/Courses/ReactApps/dex-context/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducers from \"./reducers\";\nvar store = createStore(reducers);\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n})), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n/**\n *  This is how React-Redux comes into play. It has a component called Provider that will make our Store available to the\n *  rest of the components. Provider is used at the root level of your app. So, all the child components can have access\n *  to the Store without having to write the import statement in every file. Provider uses the older Context API and an\n *  higher order component (HOC) called connect to access different properties and make them available to different child\n *  components of the app through props.\n *  We now need to use connect in the child component to access the data and “connect” with the Actions to be able to \n *  modify the data. In the App.js file, replace the export statement with this:\n *  export default connect(store => store, actions)(App);\n */","map":{"version":3,"sources":["/home/plamen/Courses/ReactApps/dex-context/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","Provider","createStore","reducers","store","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAMC,KAAK,GAAGF,WAAW,CAACC,QAAD,CAAzB;AAEAL,QAAQ,CAACO,MAAT,CACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAP,aAAa,CAACQ,UAAd;AAEA","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducers from \"./reducers\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n/**\n *  This is how React-Redux comes into play. It has a component called Provider that will make our Store available to the\n *  rest of the components. Provider is used at the root level of your app. So, all the child components can have access\n *  to the Store without having to write the import statement in every file. Provider uses the older Context API and an\n *  higher order component (HOC) called connect to access different properties and make them available to different child\n *  components of the app through props.\n *  We now need to use connect in the child component to access the data and “connect” with the Actions to be able to \n *  modify the data. In the App.js file, replace the export statement with this:\n *  export default connect(store => store, actions)(App);\n */"]},"metadata":{},"sourceType":"module"}